on:
  push:
    # Pattern matched against refs/tags
    tags: ["v[0-9]+", "v[0-9]+.[0-9]+", "v[0-9]+.[0-9]+.[0-9]+", "v[0-9]+.[0-9]+.[0-9]+-*"]

permissions:
  contents: read

name: Release
jobs:
  test:
    uses: ./.github/workflows/ci.yaml
    secrets: inherit

  check_version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: check tag version == pyproject.version
        id: version
        run: |
          pip install toml-cli
          PROJECT_VERSION=$(toml get --toml-path pyproject.toml project.version)
          TAG=$(git describe HEAD --tags --abbrev=0)
          echo TAG: $TAG
          echo "PROJECT_VERSION: $PROJECT_VERSION"
          echo "project_version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
          if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi
      - name: Check tag version > pypi version
        uses: maybe-hello-world/pyproject-check-version@v4
        id: versioncheck
        with:
          pyproject-path: "./pyproject.toml"
          test-regex: "[0-9]+.[0-9]+.[0-9]+-.+"
      - name: check output
        run: |
          echo "Output: ${{ steps.versioncheck.outputs.local_version_is_higher }}"  # 'true' or 'false
          echo "Local version: ${{ steps.versioncheck.outputs.local_version }}"     # e.g., 0.1.1
          echo "Public version: ${{ steps.versioncheck.outputs.public_version }}"   # e.g., 0.1.0

  build:
    runs-on: ubuntu-latest
    needs:
      - test
      - check_version
    strategy:
      matrix:
        python-version:
          - "3.11"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel build && \
          pip install .  && \
          python -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: release-pypi
      url: https://pypi.org/p/datacontract-cli
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Create a GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'

  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: release-testpypi
      url: https://test.pypi.org/p/datacontract-cli
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  docker:
    runs-on: ubuntu-latest
    needs:
      - test
      - check_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            datacontract/cli
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
        # try to disable qemu
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          # linux/arm64 is disabled
          # duckdb currently does not support linux_arm64_gcc4
          # https://duckdb.org/docs/extensions/working_with_extensions#platforms
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}